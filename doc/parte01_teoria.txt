Parte 1 - IntroducciÃ³n y el REPL (Read-Eval-Print Loop)
--------------------------------------------------------

Â¿QuÃ© es esto?

Vamos a crear nuestra propia base de datos desde cero, como una versiÃ³n simple de SQLite, usando el lenguaje C.

Â¿Para quÃ© sirve una base de datos?

Imagina que tienes una libreta donde anotas los datos de tus amigos: su nombre, nÃºmero de telÃ©fono, correo, etc.
Una base de datos hace algo parecido, pero en el computador, y permite guardar, buscar y ordenar esa informaciÃ³n rÃ¡pidamente.

Â¿Por quÃ© crear una base de datos desde cero?

Porque muchos usamos bases de datos como SQLite, MySQL o PostgreSQL... Â¡pero no sabemos cÃ³mo funcionan por dentro!
Este proyecto es como abrir una caja mÃ¡gica y descubrir todos sus secretos.

---

Â¿CÃ³mo funciona internamente una base de datos?

Una base de datos se divide en dos grandes partes:

1. El **front-end** (frente):
   - Es como el "intÃ©rprete" de nuestras preguntas (consultas SQL).
   - Se encarga de:
     - Separar la consulta en palabras (esto lo hace el *tokenizer*)
     - Ver si la frase tiene buena gramÃ¡tica (esto lo hace el *parser*)
     - Convertir esa frase en instrucciones internas (esto lo hace el *code generator*)

2. El **back-end** (parte trasera):
   - Es como la fÃ¡brica que hace el trabajo.
   - Incluye:
     - La *mÃ¡quina virtual (VM)*: ejecuta instrucciones como un robot.
     - El *B-tree*: una estructura parecida a un libro ordenado, para guardar y buscar datos.
     - El *pager*: decide quÃ© parte del archivo de datos se debe leer o escribir.
     - El *OS interface*: se comunica con el sistema operativo (Windows, Linux, etc.).

---

Ejemplo sencillo:

Cuando escribes algo como:
  SELECT nombre FROM amigos WHERE id = 5;

Esto es lo que pasa por dentro:

1. El tokenizer lo separa: ["SELECT", "nombre", "FROM", "amigos", "WHERE", "id", "=", "5"]
2. El parser revisa si esa frase tiene sentido.
3. El code generator crea instrucciones internas (como un programa).
4. La VM ejecuta esas instrucciones:
   - "Busca en la tabla amigos"
   - "Revisa el campo id"
   - "Devuelve el nombre si id = 5"
5. El pager y el B-tree ayudan a encontrar la informaciÃ³n dentro del archivo.
6. Finalmente, la respuesta aparece en la pantalla.

---

Â¿QuÃ© haremos en esta primera parte?

Vamos a construir el **REPL** (Read-Eval-Print Loop), que es como una consola donde escribes comandos y obtienes respuestas.

SerÃ¡ como crear nuestra propia mini terminal tipo SQLite:

  db >

AhÃ­ podrÃ¡s escribir comandos, y poco a poco vamos a enseÃ±arle a entender cosas mÃ¡s avanzadas.

---

Â¡Es como enseÃ±arle a hablar a tu propia base de datos! ğŸ“šğŸ§ ğŸ’»
